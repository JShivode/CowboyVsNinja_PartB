#include <iostream>
#include <cassert>
#include <chrono>
#include <cstdlib>
#include <cstring>
#include <random>

//#include <valgrind/valgrind.h>

#include "Team.hpp" //no need for other includes
#include "Team2.hpp" //no need for other includes

using namespace std;
using namespace std::chrono;
using namespace ariel;

/*
clang++-14 -g My_main.cpp -o My_main
valgrind --leak-check=full --error-exitcode=1 ./My_main
*/

double random_float(double min = -100, double max = 100) {
    std::default_random_engine generator(static_cast<unsigned long>(std::chrono::system_clock::now().time_since_epoch().count()));
    std::uniform_real_distribution<double> distribution(min, max);
    return distribution(generator);
}

auto create_yninja = [](double x = random_float(), double y = random_float()) {
    return new YoungNinja{"Bob", Point{x, y}};
};

auto create_tninja = [](double x = random_float(), double y = random_float()) {
    return new TrainedNinja{"Bob", Point{x, y}};
};

auto create_oninja = [](double x = random_float(), double y = random_float()) {
    return new OldNinja{"Bob", Point{x, y}};
};

auto create_cowboy = [](double x = random_float(), double y = random_float()) {
    return new Cowboy{"Bob", Point{x, y}};
};

 auto multi_attack = [](int n, Team &attacker, Team &defender) {
        for (int i = 0; i < n; i++) {
            if (defender.stillAlive()) {
                attacker.attack(&defender);
            }
        }
    };


auto simulate_battle = [](Team &team, Team &team2) {
    int i = 0;
    while (team.stillAlive() && team2.stillAlive()) {
        if (i % 2 == 0) {
            team.attack(&team2);
        } else {
            team2.attack(&team);
        }
        i++;
    }
};
auto random_char(double x = random_float(), double y = random_float()) -> Character* {
    int flag = static_cast<int>(random_float()) % 4;

    if (flag == 0) return create_cowboy(x, y);

    if (flag == 1) return create_yninja(x, y);

    if (flag == 2) return create_tninja(x, y);

    return create_oninja(x, y);
}

int main() {
    
        auto team_c1  = create_cowboy(0,  0);
        auto team2_c1 = create_cowboy(-2, 0);        
        auto team_c2  = create_cowboy(-3, 0);
        auto team2_c2 = create_cowboy(1,  0);//
        auto team2_c3 = create_cowboy(3,  0);//
        auto team_c3  = create_cowboy(5,  0);//
        auto team2_c4 = create_cowboy(-5, 0);

        Team team1{team_c1};
        team1.add(team_c2);
        team1.add(team_c3);

        team1.print();

        Team2 team2{team2_c2};
        team2.add(team2_c1);
        team2.add(team2_c3);
        team2.add(team2_c4);   
        
        team2.print();     

        multi_attack(4, team1, team2); 
        cout<<"4 attacks from team1 on team2"<<endl ;        
        team2.print();
        // The captain of team2 is the closest enemy to the captain of team1, and therefore should be dead.
               // At this point, the captain should be team2_c3; hence, the next enemy to be attacked by team2 should team_c3.        
        multi_attack(12, team2, team1);
        
        cout<<"6 attacks from team2 on team1"<<endl ;                
        team1.print();

/*

    Point a(32.3, 44), b(1.3, 3.5);

    Cowboy* cowboy1 = new Cowboy("Cowboy1", a);
    Cowboy* cowboy2 = new Cowboy("Cowboy2", b);
    Cowboy* cowboy3 = new Cowboy("Cowboy3", Point(10, 20));
    Cowboy* cowboy4 = new Cowboy("Cowboy4", Point(5, 5));

    //cowboy4->hit(150); // Make Cowboy4 dead

    Team cowboys(cowboy1);
    cowboys.add(cowboy2);
    cowboys.add(cowboy3);
    cowboys.add(cowboy4); // Adding a dead Cowboy

    Team ninjas;
    ninjas.print();

    // Create 10,000 ninjas
    for (int i = 0; i < 10000; ++i) {
        Point location(i, i);
        OldNinja* ninja = new OldNinja("Ninja" + to_string(i), location);
        ninjas.add(ninja);
    }

    // Measure the execution time of the 'attack' function
    auto start = high_resolution_clock::now();

    cowboys.attack(&ninjas);

    auto end = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(end - start);

    cout << "Attack execution time: " << duration.count() << " milliseconds" << endl;

    // Perform actions and simulate battles
    while (cowboys.stillAlive() > 0 && ninjas.stillAlive() > 0) {
        cowboys.attack(&ninjas);
        ninjas.attack(&cowboys);
        cowboys.print();
        ninjas.print();
    }

    if (cowboys.stillAlive() > 0) {
        cout << "Winner is the Cowboys team!" << endl;
    } else {
        cout << "Winner is the Ninjas team!" << endl;
    }

    // Freeing memory
    delete cowboy1;
    delete cowboy2;
    delete cowboy3;
    delete cowboy4;
    cout << "Memory freed." << endl;


    // Additional tests for shoot function
    Cowboy* cowboy5 = new Cowboy("Cowboy5", Point(50, 50));
    Cowboy* cowboy6 = new Cowboy("Cowboy6", Point(60, 60));
    OldNinja* ninja1 = new OldNinja("Ninja1", Point(70, 70));
    OldNinja* ninja2 = new OldNinja("Ninja2", Point(80, 80));

    cowboy5->shoot(cowboy6); // Cowboy5 shoots Cowboy6 (damage: 10)
    cowboy5->shoot(ninja1); // Cowboy5 shoots Ninja1 (damage: 10)
    cowboy6->shoot(cowboy5); // Cowboy6 shoots Cowboy5 (damage: 10)
    ninja1->slash(cowboy5); // Ninja1 slashes Cowboy5 (no damage)

    cout << "After shoot and slash actions:" << endl;
    cowboy5->print();
    cowboy6->print();
    ninja1->print();
    ninja2->print();

    // Freeing memory
    delete cowboy5;
    delete cowboy6;
    delete ninja1;
    delete ninja2;

*/
    return 0;
}

/*
The error message you are getting is a linker error.
 It indicates that the linker (ld) is unable to find 
 the definitions for the functions and classes referenced in your code.
 */





